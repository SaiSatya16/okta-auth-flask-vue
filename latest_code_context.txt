// File: backend/app.py
import asyncio
from flask import Flask, jsonify, request, session, redirect, url_for
from flask_restful import Api, Resource
from flask_cors import CORS
from flask_oidc import OpenIDConnect
from okta.client import Client as OktaClient
import os
from dotenv import load_dotenv
import json
from flask_session import Session
# Load environment variables
load_dotenv()

app = Flask(__name__)
CORS(app,
     supports_credentials=True,
     origins=["http://localhost:8080", "http://localhost:5000"],
     allow_headers=["Content-Type", "Authorization", "X-Requested-With"],
     expose_headers=["Content-Type", "Authorization"],
     allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"])




api = Api(app)

# Configure Okta
app.config["OIDC_CLIENT_SECRETS"] = "client_secrets.json"
app.config["OIDC_COOKIE_SECURE"] = False  # Set to True in production
app.config["OIDC_CALLBACK_ROUTE"] = "/oidc/callback"
app.config["OIDC_SCOPES"] = ["openid", "email", "profile"]
app.config["SECRET_KEY"] = os.getenv("SECRET_KEY", "a-very-secret-key")  # Ensure this is set
app.config["OIDC_ID_TOKEN_COOKIE_NAME"] = "oidc_token"
app.config["OIDC_INTROSPECTION_AUTH_METHOD"] = "client_secret_post"
app.config["OIDC_RESOURCE_SERVER_ONLY"] = False
app.config["SESSION_TYPE"] = "filesystem"
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_USE_SIGNER"] = True
app.config["SESSION_COOKIE_SECURE"] = False  # Set to True in production
app.config["SESSION_COOKIE_HTTPONLY"] = True
app.config["SESSION_COOKIE_SAMESITE"] = "Lax"

Session(app)






import ssl
from okta.request_executor import RequestExecutor

# Initialize OpenIDConnect
oidc = OpenIDConnect(app)

 

import requests

from requests.packages.urllib3.exceptions import InsecureRequestWarning

# Disable SSL warnings

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)


# Patch the requests session

old_init = requests.Session.__init__

 

def new_init(self, *args, **kwargs):

    old_init(self, *args, **kwargs)

    self.verify = False

 

requests.Session.__init__ = new_init

 

# Initialize Okta Client normally

okta_client = OktaClient({

    'orgUrl': os.getenv("OKTA_ORG_URL"),

    'token': os.getenv("OKTA_API_TOKEN")

})




# Helper functions

# def get_mfa_factors_by_subscription(subscription):

#     factors = {

#         "basic": ["oktaverify"],

#         "premium": ["oktaverify", "google"],

#         "premium+": ["oktaverify", "securityquestion", "google"]

#     }

#     return factors.get(subscription, ["oktaverify"])

 

class SignupResource(Resource):

    def post(self):

        data = request.get_json()

       

        try:

            # Create user in Okta using direct requests

            user_profile = {

                "firstName": data["firstName"],

                "lastName": data["lastName"],

                "email": data["email"],

                "login": data["email"],

                "subscription": data.get("subscription", "basic"),

                # "source": request.headers.get("Origin", "direct"),

                "appAccess": True

            }

           

            user_credentials = {

                "password": {"value": data["password"]}

            }

           

            user = {

                "profile": user_profile,

                "credentials": user_credentials

            }

           

            # Prepare the request

            okta_url = f"{os.getenv('OKTA_ORG_URL')}/api/v1/users"

            headers = {

                "Accept": "application/json",

                "Content-Type": "application/json",

                "Authorization": f"SSWS {os.getenv('OKTA_API_TOKEN')}"

            }

            params = {"activate": "true"}

           

            # Make the request with SSL verification disabled

            response = requests.post(

                okta_url,

                headers=headers,

                params=params,

                json=user,

                verify=False

            )

           

            if response.status_code >= 400:

                return {"error": response.json()}, response.status_code

           

            created_user = response.json()

            return {"message": "User created successfully", "id": created_user["id"]}, 201

           

        except Exception as e:

            return {"error": str(e)}, 400





class UserProfileResource(Resource):

    @oidc.require_login

    def get(self):

        try:

            user_info = oidc.user_getinfo(["sub", "name", "email"])

            okta_id = user_info.get("sub")

           

            # Get full user profile from Okta using direct requests

            okta_url = f"{os.getenv('OKTA_ORG_URL')}/api/v1/users/{okta_id}"

            headers = {

                "Accept": "application/json",

                "Content-Type": "application/json",

                "Authorization": f"SSWS {os.getenv('OKTA_API_TOKEN')}"

            }

           

            # Make the request with SSL verification disabled

            response = requests.get(

                okta_url,

                headers=headers,

                verify=False

            )

           

            if response.status_code >= 400:

                return {"error": response.json()}, response.status_code

           

            user_data = response.json()

           

            # Get user's subscription and other profile attributes

            profile = user_data.get("profile", {})

            subscription = profile.get("subscription", "basic")

            source = profile.get("source", "direct")

           

            # Get additional profile attributes if they exist

            mobilePhone = profile.get("mobilePhone", "")

            secondEmail = profile.get("secondEmail", "")

            city = profile.get("city", "")

            state = profile.get("state", "")

            countryCode = profile.get("countryCode", "")

           

            # Get available factors based on subscription

            # available_factors = get_mfa_factors_by_subscription(subscription)

           

            # Get enrolled factors

            # enrolled_factors = []

            # In a real implementation, you would get enrolled factors from Okta API

           

            return {

                "profile": {

                    "id": okta_id,

                    "firstName": profile.get("firstName", ""),

                    "lastName": profile.get("lastName", ""),

                    "email": profile.get("email", ""),

                    "subscription": subscription,

                    "source": source,

                    "mobilePhone": mobilePhone,

                    "secondEmail": secondEmail,

                    "city": city,

                    "state": state,

                    "countryCode": countryCode

                },

                # "mfa": {

                #     "available": available_factors,

                #     "enrolled": enrolled_factors

                # }

            }

        except Exception as e:

            app.logger.error(f"Profile error: {str(e)}")

            return {"error": str(e)}, 400

 

    @oidc.require_login

    def put(self):

        try:

            data = request.get_json()

            user_info = oidc.user_getinfo(["sub", "email"])

            okta_id = user_info.get("sub")

           

            # Update user in Okta using direct requests

            user_data = {

                "profile": {

                    "email": user_info.get("email"),

                    "login": user_info.get("email"),

                    "firstName": data.get("firstName"),

                    "lastName": data.get("lastName"),

                    "subscription": data.get("subscription"),

                    "appAccess": True

                }

            }

           

            # Add additional fields if they are provided

            if "mobilePhone" in data:

                user_data["profile"]["mobilePhone"] = data.get("mobilePhone")

            if "secondEmail" in data:

                user_data["profile"]["secondEmail"] = data.get("secondEmail")

            if "city" in data:

                user_data["profile"]["city"] = data.get("city")

            if "state" in data:

                user_data["profile"]["state"] = data.get("state")

            if "countryCode" in data:

                user_data["profile"]["countryCode"] = data.get("countryCode")

           

            # Prepare the request

            okta_url = f"{os.getenv('OKTA_ORG_URL')}/api/v1/users/{okta_id}"

            headers = {

                "Accept": "application/json",

                "Content-Type": "application/json",

                "Authorization": f"SSWS {os.getenv('OKTA_API_TOKEN')}"

            }

           

            # Make the request with SSL verification disabled

            response = requests.post(

                okta_url,

                headers=headers,

                json=user_data,

                verify=False

            )

           

            if response.status_code >= 400:

                app.logger.error(f"Update error: {response.json()}")

                return {"error": response.json()}, response.status_code

               

            return {"message": "Profile updated successfully"}

        except Exception as e:

            app.logger.error(f"Update exception: {str(e)}")

            return {"error": str(e)}, 400





class MFAResource(Resource):
    @oidc.require_login
    def get(self):
        try:
            user_info = oidc.user_getinfo(["sub"])
            okta_id = user_info.get("sub")
            
            # List all supported factors
            okta_url_supported = f"{os.getenv('OKTA_ORG_URL')}/api/v1/users/{okta_id}/factors/catalog"
            headers = {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": f"SSWS {os.getenv('OKTA_API_TOKEN')}"
            }
            response_supported = requests.get(okta_url_supported, headers=headers, verify=False)
            
            if response_supported.status_code >= 400:
                return {"error": response_supported.json()}, response_supported.status_code
            
            supported_factors = response_supported.json()
            
            # List all enrolled factors
            okta_url_enrolled = f"{os.getenv('OKTA_ORG_URL')}/api/v1/users/{okta_id}/factors"
            response_enrolled = requests.get(okta_url_enrolled, headers=headers, verify=False)
            
            if response_enrolled.status_code >= 400:
                return {"error": response_enrolled.json()}, response_enrolled.status_code
            
            enrolled_factors = response_enrolled.json()

            for factor in enrolled_factors:
                factor_id = factor.get("factorType")
                factore_name = factor.get("provider") if factor_id == "token:software:totp" else factor_id
                factor["name"] = factore_name
            
            # Prepare response
            response_data = {
                "supported_factors": supported_factors,
                "enrolled_factors": enrolled_factors
            }
            
            # Add enrollment status for each supported factor
            for factor in supported_factors:
                factor_id = factor.get("factorType")
                factore_name = factor.get("provider") if factor_id == "token:software:totp" else factor_id
                factor["name"] = factore_name
                is_enrolled = any([f for f in enrolled_factors if f.get("name") == factore_name])
                factor["enrolled"] = is_enrolled
            
            return response_data
        
        except Exception as e:
            return {"error": str(e)}, 400

    @oidc.require_login
    def post(self):
        try:
            data = request.get_json()
            user_info = oidc.user_getinfo(["sub"])
            okta_id = user_info.get("sub")
            
            # Enroll a new factor
            okta_url_enroll = f"{os.getenv('OKTA_ORG_URL')}/api/v1/users/{okta_id}/factors"
            headers = {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "Authorization": f"SSWS {os.getenv('OKTA_API_TOKEN')}"
            }
            
            # Prepare factor data based on type
            factor_type = data.get("factor_type")
            if factor_type == "question":
                factor_data = {
                    "factorType": "question",
                    "provider": "OKTA",
                    "profile": {
                        "question": data.get("question"),
                        "answer": data.get("answer")

                    }
                }
            elif factor_type == "OKTA":
                factor_data = {
                    "factorType": "token:software:totp",
                    "provider": "OKTA"
                }
            elif factor_type == "GOOGLE":
                factor_data = {
                    "factorType": "token:software:totp",
                    "provider": "GOOGLE"
                }
            else:
                return {"error": "Unsupported factor type"}, 400
            
            response = requests.post(okta_url_enroll, headers=headers, json=factor_data, verify=False)
            
            if response.status_code >= 400:
                return {"error": response.json()}, response.status_code
            
            return {"message": f"{factor_type} factor enrolled successfully"}, 201
        
        except Exception as e:
            return {"error": str(e)}, 400

class LoginStatusResource(Resource):
    def get(self):
        try:
            # Check if user is logged in
            is_logged_in = oidc.user_loggedin
            # If logged in, get some basic user info
            user_info = None
            if is_logged_in:
                user_info = oidc.user_getinfo(['sub', 'name', 'email'])
            return {
                "loggedIn": is_logged_in,
                "userInfo": user_info
            }
        except Exception as e:
            return {"loggedIn": False, "error": str(e)}


# Add resources to API
api.add_resource(SignupResource, '/api/signup')
api.add_resource(UserProfileResource, '/api/profile')
api.add_resource(MFAResource, '/api/mfa')
api.add_resource(LoginStatusResource, '/api/login-status')

# Login and logout routes
# In app.py, update your login route
@app.route('/login')
def login():
    # Generate a secure state parameter
    state = os.urandom(16).hex()
    session['oauth_state'] = state
    # Include state in the authorization request

    return oidc.redirect_to_auth_server(

        redirect_uri=url_for('oidc_callback', _external=True),

        state=state,

    )




import logging

logging.basicConfig(level=logging.DEBUG)

 

@app.route('/oidc/callback')

def oidc_callback():

    try:

        app.logger.debug("Callback received")

        app.logger.debug(f"Request args: {request.args}")

       

        # Process the callback

        info = oidc.callback()

        app.logger.debug(f"Callback info: {info}")

       

        # Set a session variable to indicate successful login

        user_info = oidc.user_getinfo(['sub', 'name', 'email'])

        session['user_info'] = user_info

        app.logger.debug(f"User info: {user_info}")

       

        # Redirect to frontend profile page

        return redirect('http://localhost:8080/profile')

    except Exception as e:

        app.logger.error(f"Callback error: {str(e)}")

        app.logger.error(f"Callback error details: {repr(e)}")

        return jsonify({"error": str(e)}), 500






@app.route('/')

def index():

    # Redirect to the frontend

    return redirect('http://localhost:8080')




@app.route('/logout')

def logout():

    # Clear the Flask session

    session.clear()


    return oidc.logout(return_to=url_for('index', _external=True))

if __name__ == '__main__':
    app.run(debug=True)
// File: frontend/README.md
# frontend

## Project setup
```
npm install
```

### Compiles and hot-reloads for development
```
npm run serve
```

### Compiles and minifies for production
```
npm run build
```

### Lints and fixes files
```
npm run lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).

// File: frontend/babel.config.js
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

// File: frontend/public/index.html
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

// File: frontend/src/App.vue
<template>
  <div id="app" class="app-container">
    <nav class="navbar">
      <div class="navbar-container">
        <div class="navbar-logo">
          <router-link to="/">
            <span class="logo-text">Okta Auth App</span>
          </router-link>
        </div>
        
        <div class="navbar-links">
          <router-link to="/" class="nav-link">Home</router-link>
          <router-link v-if="!isLoggedIn" to="/login" class="nav-link">Login</router-link>
          <router-link v-if="!isLoggedIn" to="/signup" class="nav-link">Signup</router-link>
          <router-link v-if="isLoggedIn" to="/profile" class="nav-link">Profile</router-link>
        </div>
        
        <div class="navbar-actions">
          <ThemeToggle />
          <button v-if="isLoggedIn" @click="logout" class="logout-btn">
            <span>Logout</span>
          </button>
        </div>
      </div>
    </nav>
    
    <main class="main-content">
      <transition name="fade" mode="out-in">
        <router-view/>
      </transition>
    </main>
    
    <footer class="footer">
      <p>© 2025 Okta Auth App. All rights reserved.</p>
    </footer>
  </div>
</template>

<script>
import ThemeToggle from './views/ThemeToggle.vue';
import api from './services/api';

export default {
  name: 'App',
  components: {
    ThemeToggle
  },
  data() {
    return {
      isLoggedIn: false
    }
  },
  async created() {
    try {
      const response = await api.checkLoginStatus();
      this.isLoggedIn = response.data.loggedIn;
      if (this.isLoggedIn) {
        this.userInfo = response.data.userInfo;
      }
    } catch (error) {
      console.error('Error checking login status:', error);
      this.isLoggedIn = false;
    }
  },
  methods: {
    async logout() {
      try {
        this.$store.commit('SET_AUTH_STATUS', false);
        this.$store.commit('SET_USER', null);
        window.location.href = 'http://localhost:5000/logout';
      } catch (error) {
        console.error('Logout error:', error);
      }
    }
  }
}
</script>

<style>
/* Base styles */
:root {
  --background-color: #ffffff;
  --card-background: #f8f9fa;
  --text-color: #333333;
  --border-color: #dee2e6;
  --primary-color: #4285f4;
  --secondary-color: #34a853;
  --accent-color: #ea4335;
  --hover-color: rgba(66, 133, 244, 0.1);
  --shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
}

[data-theme="dark"] {
  --background-color: #121212;
  --card-background: #1e1e1e;
  --text-color: #e0e0e0;
  --border-color: #333333;
  --primary-color: #5c9aff;
  --secondary-color: #4cc265;
  --accent-color: #ff6b6b;
  --hover-color: rgba(92, 154, 255, 0.2);
  --shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background-color: var(--background-color);
  color: var(--text-color);
  transition: background-color 0.3s ease, color 0.3s ease;
}

.app-container {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

/* Navbar styles */
.navbar {
  background-color: var(--card-background);
  box-shadow: var(--shadow);
  position: sticky;
  top: 0;
  z-index: 1000;
  transition: background-color 0.3s ease, box-shadow 0.3s ease;
}

.navbar-container {
  max-width: 1200px;
  margin: 0 auto;
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
}

.navbar-logo a {
  text-decoration: none;
  color: var(--primary-color);
  font-weight: bold;
  font-size: 1.5rem;
}

.navbar-links {
  display: flex;
  gap: 1.5rem;
}

.nav-link {
  text-decoration: none;
  color: var(--text-color);
  font-weight: 500;
  padding: 0.5rem 0;
  position: relative;
  transition: color 0.3s;
}

.nav-link:hover {
  color: var(--primary-color);
}

.nav-link::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 0;
  height: 2px;
  background-color: var(--primary-color);
  transition: width 0.3s;
}

.nav-link:hover::after,
.router-link-active::after {
  width: 100%;
}

.router-link-active {
  color: var(--primary-color);
}

.navbar-actions {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.logout-btn {
  background-color: var(--accent-color);
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  transition: background-color 0.3s;
}

.logout-btn:hover {
  background-color: #d03b2b;
}

/* Main content */
.main-content {
  flex: 1;
  max-width: 1200px;
  width: 100%;
  margin: 2rem auto;
  padding: 0 1rem;
}

/* Footer */
.footer {
  background-color: var(--card-background);
  padding: 1.5rem;
  text-align: center;
  margin-top: auto;
  transition: background-color 0.3s ease;
}

/* Transitions */
.fade-enter-active, .fade-leave-active {
  transition: opacity 0.3s;
}

.fade-enter, .fade-leave-to {
  opacity: 0;
}

@media (max-width: 768px) {
  .navbar-container {
    flex-direction: column;
    gap: 1rem;
  }
  
  .navbar-links {
    width: 100%;
    justify-content: center;
  }
  
  .navbar-actions {
    width: 100%;
    justify-content: center;
  }
}
</style>

// File: frontend/src/assets/animations.css
/* Animation utilities */
.fade-in {
    animation: fadeIn 0.5s ease-out;
  }
  
  .slide-up {
    animation: slideUp 0.5s ease-out;
  }
  
  .slide-down {
    animation: slideDown 0.5s ease-out;
  }
  
  .pulse {
    animation: pulse 2s infinite;
  }
  
  .shake {
    animation: shake 0.5s ease-in-out;
  }
  
  /* Keyframes definitions */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes slideUp {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes slideDown {
    from { opacity: 0; transform: translateY(-20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
  
  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
    20%, 40%, 60%, 80% { transform: translateX(5px); }
  }
  
  /* Transition classes for vue transitions */
  .fade-enter-active, .fade-leave-active {
    transition: opacity 0.3s ease;
  }
  
  .fade-enter-from, .fade-leave-to {
    opacity: 0;
  }
  
  .slide-enter-active, .slide-leave-active {
    transition: all 0.3s ease;
  }
  
  .slide-enter-from {
    opacity: 0;
    transform: translateY(20px);
  }
  
  .slide-leave-to {
    opacity: 0;
    transform: translateY(-20px);
  }
  
// File: frontend/src/main.js
import { createApp } from 'vue';
import App from './App.vue';
import router from './router';
import store from './store';
import './assets/animations.css';

const app = createApp(App);

app.use(router);
app.use(store);

app.mount('#app');

// File: frontend/src/router/index.js
import { createRouter, createWebHistory } from 'vue-router';
import HomeView from '../views/Home.vue';
import LoginView from '../views/Login.vue';
import SignupView from '../views/Signup.vue';
import ProfileView from '../views/Profile.vue';

const routes = [
  {
    path: '/',
    name: 'Home',
    component: HomeView
  },
  {
    path: '/login',
    name: 'Login',
    component: LoginView
  },
  {
    path: '/signup',
    name: 'Signup',
    component: SignupView
  },
  {
    path: '/profile',
    name: 'Profile',
    component: ProfileView,
    meta: {
      requiresAuth: true
    }
  }
];

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes
});

// Navigation guard
// In router/index.js
router.beforeEach(async (to, from, next) => {
  if (to.matched.some(record => record.meta.requiresAuth)) {
    try {
      const response = await fetch('http://localhost:5000/api/login-status', {
        credentials: 'include'
      });
      const data = await response.json();
      
      if (!data.loggedIn) {
        // Redirect to login page instead of directly to Okta
        next('/login');
        return;
      }
      next();
    } catch (error) {
      console.error('Auth check failed:', error);
      next('/login');
    }
  } else {
    next();
  }
});



export default router;

// File: frontend/src/services/api.js
import axios from 'axios';

const apiClient = axios.create({
  baseURL: 'http://localhost:5000/api',
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json'
  }
});

export default {
  // Auth
  checkLoginStatus() {
    return apiClient.get('/login-status');
  },
  
  // User
  signup(userData) {
    return apiClient.post('/signup', userData);
  },
  
  getProfile() {
    return apiClient.get('/profile');
  },
  
  updateProfile(profileData) {
    return apiClient.put('/profile', profileData);
  },
  
  // MFA
  getMfaFactors() {
    return apiClient.get('/mfa');
  },
  
getSecurityQuestions() {
  return apiClient.get('/mfa/questions');
},

enrollFactor(name, data = null) {
  if (data) {
    return apiClient.post('/mfa', data);
  } else {
    return apiClient.post('/mfa', { factor_type: name });
  }
}

};

// File: frontend/src/services/toast.js
import { createApp } from 'vue';
import ToastNotification from '../views/ToastNotification.vue';

const toast = {
  show(message, type = 'info', duration = 3000) {
    const mountPoint = document.createElement('div');
    document.body.appendChild(mountPoint);
    
    const toastApp = createApp(ToastNotification, {
      message,
      type,
      duration,
      onClose: () => {
        toastApp.unmount();
        document.body.removeChild(mountPoint);
      }
    });
    
    toastApp.mount(mountPoint);
    
    setTimeout(() => {
      toastApp.unmount();
      document.body.removeChild(mountPoint);
    }, duration + 300); // Add a little extra time for the animation
  },
  
  success(message, duration) {
    this.show(message, 'success', duration);
  },
  
  error(message, duration) {
    this.show(message, 'error', duration);
  },
  
  info(message, duration) {
    this.show(message, 'info', duration);
  },
  
  warning(message, duration) {
    this.show(message, 'warning', duration);
  }
};

export default toast;

// File: frontend/src/store/index.js
import { createStore } from 'vuex';
import api from '../services/api';

export default createStore({
  state: {
    user: null,
    mfa: {
      available: [],
      enrolled: []
    },
    isAuthenticated: false,
    loading: false,
    error: null
  },
  
  getters: {
    user: state => state.user,
    mfa: state => state.mfa,
    isAuthenticated: state => state.isAuthenticated,
    loading: state => state.loading,
    error: state => state.error
  },
  
  mutations: {
    SET_USER(state, user) {
      state.user = user;
    },
    SET_MFA(state, mfa) {
      state.mfa = mfa;
    },
    SET_AUTH_STATUS(state, status) {
      state.isAuthenticated = status;
    },
    SET_LOADING(state, status) {
      state.loading = status;
    },
    SET_ERROR(state, error) {
      state.error = error;
    },
    ADD_ENROLLED_FACTOR(state, factor) {
      if (!state.mfa.enrolled.includes(factor)) {
        state.mfa.enrolled.push(factor);
      }
    }
  },
  
  actions: {
    async checkAuth({ commit }) {
      try {
        const response = await api.checkLoginStatus();
        commit('SET_AUTH_STATUS', response.data.loggedIn);
        return response.data.loggedIn;
      } catch (error) {
        commit('SET_AUTH_STATUS', false);
        return false;
      }
    },
    
    async fetchUserProfile({ commit }) {
      commit('SET_LOADING', true);
      commit('SET_ERROR', null);
      
      try {
        const response = await api.getProfile();
        commit('SET_USER', response.data.profile);
        commit('SET_MFA', response.data.mfa);
      } catch (error) {
        commit('SET_ERROR', 'Failed to load user profile');
        console.error(error);
      } finally {
        commit('SET_LOADING', false);
      }
    },
    
    async updateProfile({ commit }, profileData) {
      commit('SET_LOADING', true);
      commit('SET_ERROR', null);
      
      try {
        await api.updateProfile(profileData);
        commit('SET_USER', { ...this.state.user, ...profileData });
        return true;
      } catch (error) {
        const errorMsg = error.response?.data?.error || 'Failed to update profile';
        commit('SET_ERROR', errorMsg);
        return false;
      } finally {
        commit('SET_LOADING', false);
      }
    },
    
    async enrollFactor({ commit }, factorType) {
      commit('SET_LOADING', true);
      commit('SET_ERROR', null);
      
      try {
        await api.enrollFactor(factorType);
        commit('ADD_ENROLLED_FACTOR', factorType);
        return true;
      } catch (error) {
        const errorMsg = error.response?.data?.error || `Failed to enroll in ${factorType}`;
        commit('SET_ERROR', errorMsg);
        return false;
      } finally {
        commit('SET_LOADING', false);
      }
    }
  }
});

// File: frontend/src/views/Home.vue
<template>
  <div class="home-container">
    <div class="home-content">
      <h1 class="home-title">Welcome to Okta Auth App</h1>
      <p class="home-description">Secure authentication with multi-factor options</p>
      
      <div class="home-cards">
        <div class="feature-card">
          <div class="icon-container">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
              <path d="M7 11V7a5 5 0 0 1 10 0v4"></path>
            </svg>
          </div>
          <h3>Secure Authentication</h3>
          <p>Login securely with Okta's enterprise-grade authentication</p>
        </div>
        
        <div class="feature-card">
          <div class="icon-container">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path>
            </svg>
          </div>
          <h3>Multi-Factor Auth</h3>
          <p>Add extra layers of security with multiple authentication factors</p>
        </div>
        
        <div class="feature-card">
          <div class="icon-container">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
              <circle cx="8.5" cy="7" r="4"></circle>
              <line x1="20" y1="8" x2="20" y2="14"></line>
              <line x1="23" y1="11" x2="17" y2="11"></line>
            </svg>
          </div>
          <h3>User Management</h3>
          <p>Easy profile management and subscription options</p>
        </div>
      </div>
      
      <div class="home-actions">
        <div v-if="isLoggedIn" class="action-container">
          <p>You are logged in as a user!</p>
          <router-link to="/profile" class="action-button primary">Go to Profile</router-link>
        </div>
        <div v-else class="action-container">
          <p>Please log in to access your profile and MFA settings.</p>
          <div class="button-group">
            <router-link to="/login" class="action-button primary">Login</router-link>
            <router-link to="/signup" class="action-button secondary">Sign Up</router-link>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import api from '../services/api';

export default {
  name: 'HomeView',
  data() {
    return {
      isLoggedIn: false
    }
  },
  async created() {
    try {
      const response = await api.checkLoginStatus();
      this.isLoggedIn = response.data.loggedIn;
    } catch (error) {
      console.error('Error checking login status:', error);
    }
  }
}
</script>

<style scoped>
.home-container {
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
  animation: fadeIn 0.5s ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.home-content {
  text-align: center;
}

.home-title {
  font-size: 2.5rem;
  color: var(--primary-color);
  margin-bottom: 1rem;
}

.home-description {
  font-size: 1.2rem;
  color: var(--text-color);
  opacity: 0.8;
  margin-bottom: 3rem;
}

.home-cards {
  display: flex;
  flex-wrap: wrap;
  gap: 2rem;
  justify-content: center;
  margin-bottom: 3rem;
}

.feature-card {
  background-color: var(--card-background);
  border-radius: 8px;
  padding: 2rem;
  flex: 1;
  min-width: 250px;
  max-width: 350px;
  box-shadow: var(--shadow);
  transition: all 0.3s ease;
}

.feature-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.icon-container {
  background-color: var(--hover-color);
  width: 60px;
  height: 60px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0 auto 1.5rem;
}

.icon-container svg {
  color: var(--primary-color);
}

.feature-card h3 {
  margin-bottom: 1rem;
  color: var(--text-color);
}

.feature-card p {
  color: var(--text-color);
  opacity: 0.8;
}

.home-actions {
  margin-top: 3rem;
}

.action-container {
  background-color: var(--card-background);
  border-radius: 8px;
  padding: 2rem;
  max-width: 600px;
  margin: 0 auto;
  box-shadow: var(--shadow);
}

.action-container p {
  margin-bottom: 1.5rem;
}

.button-group {
  display: flex;
  gap: 1rem;
  justify-content: center;
}

.action-button {
  display: inline-block;
  padding: 0.8rem 1.5rem;
  border-radius: 4px;
  font-weight: 500;
  text-decoration: none;
  transition: all 0.3s;
}

.action-button.primary {
  background-color: var(--primary-color);
  color: white;
}

.action-button.primary:hover {
  background-color: #3b78e7;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.action-button.secondary {
  background-color: transparent;
  color: var(--primary-color);
  border: 1px solid var(--primary-color);
}

.action-button.secondary:hover {
  background-color: var(--hover-color);
  transform: translateY(-2px);
}

@media (max-width: 768px) {
  .home-cards {
    flex-direction: column;
    align-items: center;
  }
  
  .feature-card {
    max-width: 100%;
  }
  
  .button-group {
    flex-direction: column;
  }
}
</style>

// File: frontend/src/views/LoadingSpinner.vue
<template>
    <div class="loading-container" :class="{ overlay: overlay }">
      <div class="spinner-container">
        <div class="spinner"></div>
        <p v-if="message" class="loading-message">{{ message }}</p>
      </div>
    </div>
  </template>
  
  <script>
  export default {
    name: 'LoadingSpinner',
    props: {
      message: {
        type: String,
        default: 'Loading...'
      },
      overlay: {
        type: Boolean,
        default: false
      }
    }
  }
  </script>
  
  <style scoped>
  .loading-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 200px;
  }
  
  .loading-container.overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 9999;
  }
  
  .spinner-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: var(--card-background);
    padding: 2rem;
    border-radius: 8px;
    box-shadow: var(--shadow);
  }
  
  .spinner {
    width: 40px;
    height: 40px;
    border: 4px solid rgba(66, 133, 244, 0.2);
    border-radius: 50%;
    border-top-color: var(--primary-color);
    animation: spin 1s linear infinite;
  }
  
  .loading-message {
    margin-top: 1rem;
    color: var(--text-color);
    font-weight: 500;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  </style>
  
// File: frontend/src/views/Login.vue
<template>
  <div class="login-container">
    <div class="login-card">
      <h1 class="login-title">Welcome Back</h1>
      <p class="login-subtitle">Sign in to access your account</p>
      
      <button @click="login" class="login-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path>
          <polyline points="10 17 15 12 10 7"></polyline>
          <line x1="15" y1="12" x2="3" y2="12"></line>
        </svg>
        <span>Login with Okta</span>
      </button>
      
      <div class="login-footer">
        Don't have an account? <router-link to="/signup">Sign up</router-link>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'LoginView',
  methods: {
    async login() {
      try {
        window.location.href = 'http://localhost:5000/login';
      } catch (error) {
        console.error('Login error:', error);
        if (error.toString().includes('not allowed to access this app')) {
          setTimeout(() => {
            window.location.href = 'http://localhost:5000/login';
          }, 2000);
        }
      }
    }
  }
}
</script>

<style scoped>
.login-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 80vh;
  padding: 2rem;
  animation: fadeIn 0.5s ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.login-card {
  background-color: var(--card-background);
  border-radius: 8px;
  box-shadow: var(--shadow);
  padding: 2.5rem;
  width: 100%;
  max-width: 400px;
  text-align: center;
  transition: all 0.3s ease;
}

.login-title {
  color: var(--primary-color);
  margin-bottom: 0.5rem;
  font-size: 1.8rem;
}

.login-subtitle {
  color: var(--text-color);
  margin-bottom: 2rem;
  opacity: 0.8;
}

.login-button {
  width: 100%;
  padding: 0.8rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 0.8rem;
}

.login-button:hover {
  background-color: #3b78e7;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.login-button:active {
  transform: translateY(0);
}

.login-footer {
  margin-top: 2rem;
  font-size: 0.9rem;
}

.login-footer a {
  color: var(--primary-color);
  text-decoration: none;
  font-weight: 500;
}

.login-footer a:hover {
  text-decoration: underline;
}
</style>

// File: frontend/src/views/Profile.vue
<template>
  <div class="profile" v-if="profile">
    <h1>Your Profile</h1>
    
    <div v-if="!editing">
      <div class="profile-info">
        <p><strong>Name:</strong> {{ profile.firstName }} {{ profile.lastName }}</p>
        <p><strong>Email:</strong> {{ profile.email }}</p>
        <p><strong>Subscription:</strong> {{ profile.subscription }}</p>
        <p><strong>Source:</strong> {{ profile.source }}</p>
        
        <!-- Show additional details if they exist -->
        <div v-if="hasAdditionalDetails" class="additional-details">
          <h3>Additional Details</h3>
          <p v-if="profile.mobilePhone"><strong>Mobile Phone:</strong> {{ profile.mobilePhone }}</p>
          <p v-if="profile.secondEmail"><strong>Secondary Email:</strong> {{ profile.secondEmail }}</p>
          <p v-if="profile.city"><strong>City:</strong> {{ profile.city }}</p>
          <p v-if="profile.state"><strong>State:</strong> {{ profile.state }}</p>
          <p v-if="profile.countryCode"><strong>Country Code:</strong> {{ profile.countryCode }}</p>
        </div>
      </div>
      
      <div class="action-buttons">
        <button @click="editing = true" class="edit-button">Edit Profile</button>
        <button @click="showAdditionalFields = !showAdditionalFields" class="details-button">
          {{ showAdditionalFields ? 'Hide Additional Details' : 'Add More Details' }}
        </button>
      </div>
      
      <!-- Additional fields form when not in edit mode -->
      <div v-if="showAdditionalFields && !editing" class="additional-fields-form slide-up">
        <h3>Additional Details</h3>
        <form @submit.prevent="updateAdditionalDetails">
          <div class="form-group">
            <label for="mobilePhone">Mobile Phone</label>
            <input type="tel" id="mobilePhone" v-model="additionalDetails.mobilePhone">
          </div>
          
          <div class="form-group">
            <label for="secondEmail">Secondary Email</label>
            <input type="email" id="secondEmail" v-model="additionalDetails.secondEmail">
          </div>
          
          <div class="form-group">
            <label for="city">City</label>
            <input type="text" id="city" v-model="additionalDetails.city">
          </div>
          
          <div class="form-group">
            <label for="state">State</label>
            <input type="text" id="state" v-model="additionalDetails.state">
          </div>
          
          <div class="form-group">
            <label for="countryCode">Country Code</label>
            <select id="countryCode" v-model="additionalDetails.countryCode">
              <option value="">Select Country</option>
              <option value="US">United States</option>
              <option value="CA">Canada</option>
              <option value="UK">United Kingdom</option>
              <option value="AU">Australia</option>
              <option value="IN">India</option>
              <!-- Add more countries as needed -->
            </select>
          </div>
          
          <div class="form-actions">
            <button type="submit" :disabled="updatingDetails">
              {{ updatingDetails ? 'Saving...' : 'Save Details' }}
            </button>
            <button type="button" @click="showAdditionalFields = false">Cancel</button>
          </div>
        </form>
      </div>
    </div>
    
    <!-- Main edit form -->
    <form v-else @submit.prevent="updateProfile" class="edit-form">
      <div class="form-group">
        <label for="firstName">First Name</label>
        <input type="text" id="firstName" v-model="editForm.firstName">
      </div>
      
      <div class="form-group">
        <label for="lastName">Last Name</label>
        <input type="text" id="lastName" v-model="editForm.lastName">
      </div>
      
      <!-- Include additional fields in the main edit form -->
      <div class="additional-fields">
        <h3>Additional Details</h3>
        
        <div class="form-group">
          <label for="editMobilePhone">Mobile Phone</label>
          <input type="tel" id="editMobilePhone" v-model="editForm.mobilePhone">
        </div>
        
        <div class="form-group">
          <label for="editsecondEmail">Secondary Email</label>
          <input type="email" id="editsecondEmail" v-model="editForm.secondEmail">
        </div>
        
        <div class="form-group">
          <label for="editCity">City</label>
          <input type="text" id="editCity" v-model="editForm.city">
        </div>
        
        <div class="form-group">
          <label for="editState">State</label>
          <input type="text" id="editState" v-model="editForm.state">
        </div>
        
        <div class="form-group">
          <label for="editCountryCode">Country Code</label>
          <select id="editCountryCode" v-model="editForm.countryCode">
            <option value="">Select Country</option>
            <option value="US">United States</option>
            <option value="CA">Canada</option>
            <option value="UK">United Kingdom</option>
            <option value="AU">Australia</option>
            <option value="IN">India</option>
            <!-- Add more countries as needed -->
          </select>
        </div>
      </div>
      
      <div class="form-actions">
        <button type="submit" :disabled="updating">Save</button>
        <button type="button" @click="cancelEdit">Cancel</button>
      </div>
    </form>
    
    <div class="subscription-section">
      <h2>Subscription Management</h2>
      <p>Your current subscription: <strong>{{ profile.subscription }}</strong></p>
      
      <div class="subscription-plans">
        <div class="plan" :class="{ 'current': profile.subscription === 'basic' }">
          <h3>Basic Plan</h3>
          <p class="price">Free</p>
          <ul class="benefits">
            <li>Okta Verify authentication</li>
          </ul>
          <button v-if="profile.subscription !== 'basic'" 
                  @click="updateSubscription('basic')"
                  :disabled="updating">
            Select Plan
          </button>
          <span v-else class="current-plan">Current Plan</span>
        </div>
        
        <div class="plan" :class="{ 'current': profile.subscription === 'premium' }">
          <h3>Premium Plan</h3>
          <p class="price">$10/month</p>
          <ul class="benefits">
            <li>Okta Verify authentication</li>
            <li>Google Authenticator support</li>
          </ul>
          <button v-if="profile.subscription !== 'premium'" 
                  @click="updateSubscription('premium')"
                  :disabled="updating">
            Upgrade Now
          </button>
          <span v-else class="current-plan">Current Plan</span>
        </div>
        
        <div class="plan" :class="{ 'current': profile.subscription === 'premium+' }">
          <h3>Premium+ Plan</h3>
          <p class="price">$20/month</p>
          <ul class="benefits">
            <li>Okta Verify authentication</li>
            <li>Google Authenticator support</li>
            <li>Security Question Authentication</li>
          </ul>
          <button v-if="profile.subscription !== 'premium+'" 
                  @click="updateSubscription('premium+')"
                  :disabled="updating">
            Upgrade Now
          </button>
          <span v-else class="current-plan">Current Plan</span>
        </div>
      </div>
    </div>
    
    <div class="mfa-section">
      <h2>Multi-Factor Authentication</h2>
      
      <div v-if="refreshingMfa" class="mfa-loading">
        <p>Refreshing available MFA options...</p>
        <div class="spinner"></div>
      </div>
      <div v-else>
        <div v-if="mfa.supported_factors && mfa.supported_factors.length > 0">
          <p>Available factors:</p>
          <ul>
            <li v-for="factor in mfa.supported_factors" :key="factor.name">
              {{ getFriendlyFactorName(factor.name) }}
              <button 
                v-if="!factor.enrolled" 
                @click="enrollFactor(factor.name)"
                :disabled="enrolling === factor.name"
              >
                {{ enrolling === factor.name ? 'Enrolling...' : 'Enroll' }}
              </button>
              <span v-else class="enrolled">Enrolled</span>
            </li>
          </ul>
        </div>
        <div v-else-if="mfa.supported_factors === undefined || mfa.supported_factors.length === 0">
          <p>No MFA factors available.</p>
        </div>
      </div>
    </div>
    
    <div v-if="error" class="error">{{ error }}</div>
  </div>
  <LoadingSpinner v-else message="Loading profile..." />

  <!-- Security Question Modal -->
  <div v-if="showSecurityQuestionModal" class="modal-overlay">
    <div class="security-question-modal">
      <h3>Set Up Security Question</h3>
      
      <div v-if="securityQuestions && securityQuestions.length > 0">
        <div class="form-group">
          <label for="securityQuestion">Select a security question:</label>
          <select id="securityQuestion" v-model="selectedQuestion">
            <option value="">Choose a question</option>
            <option v-for="q in securityQuestions" :key="q.question" :value="q.question">
              {{ q.questionText }}
            </option>
          </select>
        </div>
        
        <div class="form-group">
          <label for="securityAnswer">Your answer:</label>
          <input 
            type="text" 
            id="securityAnswer" 
            v-model="securityAnswer" 
            placeholder="Enter your answer"
          >
        </div>
        
        <div v-if="questionError" class="error-message">
          {{ questionError }}
        </div>
        
        <div class="modal-actions">
          <button 
            @click="submitSecurityQuestion" 
            :disabled="!selectedQuestion || !securityAnswer"
          >
            Submit
          </button>
          <button 
            @click="cancelSecurityQuestion" 
            type="button"
          >
            Cancel
          </button>
        </div>
      </div>
      
      <div v-else-if="securityQuestions && securityQuestions.length === 0">
        <p>No security questions are available.</p>
        <button @click="cancelSecurityQuestion">Close</button>
      </div>
      
      <div v-else class="loading">
        <p>Loading security questions...</p>
        <div class="spinner"></div>
      </div>
    </div>
  </div>
</template>

<script>
import api from '../services/api';
import toast from '../services/toast';
import LoadingSpinner from '../views/LoadingSpinner.vue';

export default {
  name: 'ProfileView',
  components: {
    LoadingSpinner
  },
  data() {
    return {
      profile: null,
      mfa: {
        supported_factors: [],
        enrolled_factors: []
      },
      editing: false,
      editForm: {
        firstName: '',
        lastName: '',
        subscription: '',
        mobilePhone: '',
        secondEmail: '',
        city: '',
        state: '',
        countryCode: ''
      },
      additionalDetails: {
        mobilePhone: '',
        secondEmail: '',
        city: '',
        state: '',
        countryCode: ''
      },
      showAdditionalFields: false,
      updating: false,
      updatingDetails: false,
      enrolling: null,
      error: null,
      refreshingMfa: false,
      showSecurityQuestionModal: false,
      securityQuestions: null,
      selectedQuestion: '',
      securityAnswer: '',
      questionError: ''
    }
  },
  computed: {
    hasAdditionalDetails() {
      return this.profile && (
        this.profile.mobilePhone || 
        this.profile.secondEmail || 
        this.profile.city || 
        this.profile.state || 
        this.profile.countryCode
      );
    }
  },
  async created() {
    try {
      const response = await api.getProfile();
      const mfaresponse = await api.getMfaFactors();
      this.profile = response.data.profile;
      this.mfa.supported_factors = mfaresponse.data.supported_factors;
      this.mfa.enrolled_factors = mfaresponse.data.enrolled_factors || [];
      
      // Initialize edit form with all fields
      this.initializeEditForm();
      
      // Initialize additional details form
      this.initializeAdditionalDetails();
    } catch (error) {
      this.error = 'Failed to load profile data';
      console.error(error);
    }
  },
  methods: {
    async updateProfile() {
      this.updating = true;
      this.error = null;
      
      try {
        await api.updateProfile(this.editForm);
        
        // Update local profile data with all fields
        this.profile.firstName = this.editForm.firstName;
        this.profile.lastName = this.editForm.lastName;
        this.profile.subscription = this.editForm.subscription;
        this.profile.mobilePhone = this.editForm.mobilePhone;
        this.profile.secondEmail = this.editForm.secondEmail;
        this.profile.city = this.editForm.city;
        this.profile.state = this.editForm.state;
        this.profile.countryCode = this.editForm.countryCode;
        
        // Exit edit mode
        this.editing = false;
        toast.success('Profile updated successfully');
      } catch (error) {
        this.error = error.response?.data?.error || 'Failed to update profile';
        toast.error(this.error);
      } finally {
        this.updating = false;
      }
    },
    
    async updateAdditionalDetails() {
      this.updatingDetails = true;
      this.error = null;
      
      try {
        // Create an update object that includes only the additional details
        const updateData = {
          firstName: this.profile.firstName,
          lastName: this.profile.lastName,
          subscription: this.profile.subscription,
          ...this.additionalDetails
        };
        
        await api.updateProfile(updateData);
        
        // Update local profile data with additional details
        this.profile.mobilePhone = this.additionalDetails.mobilePhone;
        this.profile.secondEmail = this.additionalDetails.secondEmail;
        this.profile.city = this.additionalDetails.city;
        this.profile.state = this.additionalDetails.state;
        this.profile.countryCode = this.additionalDetails.countryCode;
        
        // Hide the additional fields form
        this.showAdditionalFields = false;
        toast.success('Additional details updated successfully');
      } catch (error) {
        this.error = error.response?.data?.error || 'Failed to update additional details';
        toast.error(this.error);
      } finally {
        this.updatingDetails = false;
      }
    },
    
    async updateSubscription(newSubscription) {
      this.updating = true;
      this.error = null;
      this.editForm = {
        firstName: this.profile.firstName,
        lastName: this.profile.lastName,
        subscription: newSubscription
      };
      
      try {
        await api.updateProfile(this.editForm);
        
        // Update local profile data
        this.profile.subscription = newSubscription;
        
        this.refreshingMfa = true;
        // Add a small delay before refreshing MFA options to allow Okta to process the update
        toast.success('Profile updated successfully');
        setTimeout(async () => {
          await this.refreshMfaOptions();
          this.refreshingMfa = false;
        }, 1000);
      } catch (error) {
        toast.error(error.response?.data?.error || 'Failed to update subscription');
      } finally {
        this.updating = false;
      }
    },
    
    async enrollFactor(name) {
      this.enrolling = name;
      this.error = null;
      
      if (name === 'question') {
        // Show security question modal
        this.showSecurityQuestionModal = true;
        // Fetch available security questions
        await this.fetchSecurityQuestions();
      } else {
        try {
          await api.enrollFactor(name);
          toast.success(`Enrolled in ${this.getFriendlyFactorName(name)} successfully`);
          // Refresh MFA options after enrolling
          await this.refreshMfaOptions();
        } catch (error) {
          this.error = error.response?.data?.error || `Failed to enroll in ${this.getFriendlyFactorName(name)}`;
        } finally {
          this.enrolling = null;
        }
      }
    },
    
    async fetchSecurityQuestions() {
      try {
        const response = await api.getSecurityQuestions();
        this.securityQuestions = response.data;
      } catch (error) {
        this.error = error.response?.data?.error || 'Failed to load security questions';
        this.showSecurityQuestionModal = false;
      }
    },
    
    async submitSecurityQuestion() {
      try {
        if (!this.selectedQuestion || !this.securityAnswer) {
          this.questionError = 'Please select a question and provide an answer';
          return;
        }
        
        await api.enrollFactor('question', {
          factor_type: 'question',
          question: this.selectedQuestion,
          answer: this.securityAnswer
        });
        
        toast.success('Security question enrolled successfully');
        this.showSecurityQuestionModal = false;
        this.selectedQuestion = '';
        this.securityAnswer = '';
        this.questionError = '';
        
        // Refresh MFA options after enrolling
        await this.refreshMfaOptions();
      } catch (error) {
        this.questionError = error.response?.data?.error || 'Failed to enroll security question';
      } finally {
        this.enrolling = null;
      }
    },
    
    cancelSecurityQuestion() {
      this.showSecurityQuestionModal = false;
      this.selectedQuestion = '';
      this.securityAnswer = '';
      this.questionError = '';
      this.enrolling = null;
    },
    
    async refreshMfaOptions() {
      this.error = null;
      try {
        // First check if user is still authenticated
        const authStatus = await api.checkLoginStatus();
        if (!authStatus.data.loggedIn) {
          // Redirect to login if not authenticated

          window.location.href = 'http://localhost:5000/login';
          return;
        }
        
        const response = await api.getMfaFactors();
        this.mfa.supported_factors = response.data.supported_factors;
        this.mfa.enrolled_factors = response.data.enrolled_factors || [];
      } catch (error) {
        console.error('Failed to refresh MFA options:', error);
        if (error.response && error.response.status === 400) {
          // If session expired, redirect to login
          if (error.response.data.error && error.response.data.error.includes('session')) {
            window.location.href = 'http://localhost:5000/login';
            return;
          }
          this.error = 'Failed to load MFA options. Please try logging in again.';
        }
      }
    },
    
    // isFactorEnrolled(factorType) {
    //   return this.mfa.enrolled_factors.includes(factorType);
    // },
    
    getFriendlyFactorName(factorType) {
      const names = {
        'question': 'Security Question',
        'OKTA': 'Okta Verify',
        'GOOGLE': 'Google Authenticator'
      };
      
      return names[factorType] || factorType;
    },
    
    initializeEditForm() {
      this.editForm = {
        firstName: this.profile.firstName || '',
        lastName: this.profile.lastName || '',
        subscription: this.profile.subscription || 'basic',
        mobilePhone: this.profile.mobilePhone || '',
        secondEmail: this.profile.secondEmail || '',
        city: this.profile.city || '',
        state: this.profile.state || '',
        countryCode: this.profile.countryCode || ''
      };
    },
    
    initializeAdditionalDetails() {
      this.additionalDetails = {
        mobilePhone: this.profile.mobilePhone || '',
        secondEmail: this.profile.secondEmail || '',
        city: this.profile.city || '',
        state: this.profile.state || '',
        countryCode: this.profile.countryCode || ''
      };
    },
    cancelEdit() {
      this.editing = false;
      this.initializeEditForm();
    },
  }
}
</script>

<style scoped>
.profile {
  max-width: 900px;
  margin: 0 auto;
  padding: 2rem;
  animation: fadeIn 0.5s ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

h1 {
  color: var(--primary-color);
  margin-bottom: 2rem;
  text-align: center;
  font-size: 2rem;
}

h2 {
  color: var(--text-color);
  margin: 2rem 0 1rem;
  font-size: 1.5rem;
  border-bottom: 2px solid var(--border-color);
  padding-bottom: 0.5rem;
}

.profile-info {
  background-color: var(--card-background);
  margin-bottom: 2rem;
  padding: 1.5rem;
  border-radius: 8px;
  box-shadow: var(--shadow);
  transition: all 0.3s ease;
}

.profile-info p {
  margin-bottom: 0.8rem;
  display: flex;
  justify-content: space-between;
  border-bottom: 1px solid var(--border-color);
  padding-bottom: 0.8rem;
}

.profile-info p:last-child {
  border-bottom: none;
  padding-bottom: 0;
  margin-bottom: 0;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 500;
}

.form-group input,
.form-group select {
  width: 100%;
  padding: 0.8rem;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  background-color: var(--background-color);
  color: var(--text-color);
  transition: all 0.3s;
}

.form-group input:focus,
.form-group select:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(66,133, 244, 0.2);
}

.form-actions {
  display: flex;
  gap: 1rem;
  margin-top: 1.5rem;
}

button {
  padding: 0.8rem 1.5rem;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s;
  border: none;
}

button[type="submit"] {
  background-color: var(--primary-color);
  color: white;
}

button[type="submit"]:hover:not(:disabled) {
  background-color: #3b78e7;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

button[type="button"] {
  background-color: var(--card-background);
  color: var(--text-color);
  border: 1px solid var(--border-color);
}

button[type="button"]:hover {
  background-color: var(--hover-color);
}

button:disabled {
  opacity: 0.7;
  cursor: not-allowed;
}

.subscription-section, .mfa-section {
  background-color: var(--card-background);
  border-radius: 8px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  box-shadow: var(--shadow);
  transition: all 0.3s ease;
}

.subscription-plans {
  display: flex;
  flex-wrap: wrap;
  gap: 1.5rem;
  margin-top: 1.5rem;
}

.plan {
  flex: 1;
  min-width: 220px;
  padding: 1.5rem;
  border-radius: 8px;
  border: 2px solid var(--border-color);
  text-align: center;
  transition: all 0.3s ease;
}

.plan:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.plan.current {
  border-color: var(--primary-color);
  background-color: var(--hover-color);
}

.plan h3 {
  margin-top: 0;
  color: var(--primary-color);
}

.price {
  font-size: 1.5rem;
  font-weight: bold;
  color: var(--primary-color);
  margin: 1rem 0;
}

.benefits {
  text-align: left;
  margin: 1.5rem 0;
  padding-left: 1.5rem;
}

.benefits li {
  margin-bottom: 0.8rem;
  position: relative;
}

.benefits li::before {
  content: "✓";
  color: var(--secondary-color);
  position: absolute;
  left: -1.2rem;
  font-weight: bold;
}

.current-plan {
  display: inline-block;
  padding: 0.5rem 1rem;
  background-color: var(--primary-color);
  color: white;
  border-radius: 4px;
  font-weight: 500;
}

.mfa-section ul {
  list-style: none;
  padding: 0;
}

.mfa-section li {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem;
  border-bottom: 1px solid var(--border-color);
}

.mfa-section li:last-child {
  border-bottom: none;
}

.enrolled {
  background-color: var(--secondary-color);
  color: white;
  padding: 0.3rem 0.8rem;
  border-radius: 4px;
  font-size: 0.8rem;
  font-weight: 500;
}

.error {
  background-color: rgba(234, 67, 53, 0.1);
  color: var(--accent-color);
  padding: 1rem;
  border-radius: 4px;
  margin-top: 1.5rem;
  text-align: center;
}

.loading, .mfa-loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 200px;
}

.spinner {
  border: 4px solid rgba(66, 133, 244, 0.1);
  border-top: 4px solid var(--primary-color);
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
  margin: 1.5rem auto;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.profile-card {
  background-color: var(--card-background);
  border-radius: 8px;
  box-shadow: var(--shadow);
  padding: 2rem;
  margin-bottom: 2rem;
  transition: all 0.3s ease;
}

.profile-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
}

.tab-navigation {
  display: flex;
  border-bottom: 1px solid var(--border-color);
  margin-bottom: 2rem;
}

.tab {
  padding: 1rem 1.5rem;
  cursor: pointer;
  position: relative;
  font-weight: 500;
  color: var(--text-color);
  opacity: 0.7;
  transition: all 0.3s ease;
}

.tab.active {
  color: var(--primary-color);
  opacity: 1;
}

.tab::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 0;
  height: 3px;
  background-color: var(--primary-color);
  transition: width 0.3s ease;
}

.tab.active::after {
  width: 100%;
}

.tab:hover {
  opacity: 1;
}

.badge {
  display: inline-block;
  padding: 0.25rem 0.5rem;
  border-radius: 999px;
  font-size: 0.75rem;
  font-weight: 600;
  margin-left: 0.5rem;
}

.badge-premium {
  background-color: var(--primary-color);
  color: white;
}

.badge-basic {
  background-color: var(--border-color);
  color: var(--text-color);
}

.badge-premium-plus {
  background-color: var(--accent-color);
  color: white;
}

.action-buttons {
  display: flex;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.edit-button, .details-button {
  padding: 0.8rem 1.5rem;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s;
}

.edit-button {
  background-color: var(--primary-color);
  color: white;
  border: none;
}

.details-button {
  background-color: var(--card-background);
  color: var(--text-color);
  border: 1px solid var(--border-color);
}

.edit-button:hover {
  background-color: #3b78e7;
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.details-button:hover {
  background-color: var(--hover-color);
  transform: translateY(-2px);
}

.additional-fields-form {
  background-color: var(--card-background);
  border-radius: 8px;
  padding: 1.5rem;
  margin-top: 1rem;
  margin-bottom: 2rem;
  box-shadow: var(--shadow);
}

.additional-details {
  margin-top: 1.5rem;
  padding-top: 1.5rem;
  border-top: 1px solid var(--border-color);
}

.additional-details h3 {
  margin-bottom: 1rem;
  color: var(--primary-color);
}

.slide-up {
  animation: slideUp 0.3s ease-out;
}

@keyframes slideUp {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.security-question-modal {
  background-color: var(--card-background);
  border-radius: 8px;
  padding: 2rem;
  width: 90%;
  max-width: 500px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.security-question-modal h3 {
  margin-top: 0;
  color: var(--primary-color);
  margin-bottom: 1.5rem;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-top: 1.5rem;
}

.error-message {
  color: var(--accent-color);
  margin-top: 0.5rem;
  font-size: 0.9rem;
}
</style>


// File: frontend/src/views/Signup.vue
<template>
  <div class="signup-container">
    <div class="signup-card">
      <h1 class="signup-title">Create Account</h1>
      <form @submit.prevent="signup" class="signup-form">
        <div class="form-group">
          <label for="firstName">First Name</label>
          <input type="text" id="firstName" v-model="user.firstName" required>
        </div>
        
        <div class="form-group">
          <label for="lastName">Last Name</label>
          <input type="text" id="lastName" v-model="user.lastName" required>
        </div>
        
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" id="email" v-model="user.email" required>
        </div>
        
        <div class="form-group">
          <label for="password">Password</label>
          <input type="password" id="password" v-model="user.password" required>
        </div>
        
        <button type="submit" :disabled="loading" class="signup-button">
          <span v-if="loading" class="spinner"></span>
          <span>{{ loading ? 'Creating Account...' : 'Sign Up' }}</span>
        </button>
        
        <div v-if="error" class="error-message">{{ error }}</div>
      </form>
      
      <div class="signup-footer">
        Already have an account? <router-link to="/login">Login</router-link>
      </div>
    </div>
  </div>
</template>

<script>
import api from '../services/api';
import toast from '../services/toast';
export default {
  name: 'SignupView',
  data() {
    return {
      user: {
        firstName: '',
        lastName: '',
        email: '',
        password: '',
        subscription: 'basic'
      },
      loading: false,
      error: null
    }
  },
  methods: {
    async signup() {
      this.loading = true;
      this.error = null;
      
      try {
        await api.signup(this.user);
        toast.success('Account created successfully');
        this.$router.push('/login');
      } catch (error) {
        toast.error(error.response?.data?.error || 'Failed to create account');
      } finally {
        this.loading = false;
      }
    }
  }
}
</script>

<style scoped>
.signup-container {
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 80vh;
  padding: 2rem;
  animation: fadeIn 0.5s ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.signup-card {
  background-color: var(--card-background);
  border-radius: 8px;
  box-shadow: var(--shadow);
  padding: 2.5rem;
  width: 100%;
  max-width: 500px;
  transition: all 0.3s ease;
}

.signup-title {
  color: var(--primary-color);
  margin-bottom: 1.5rem;
  text-align: center;
  font-size: 1.8rem;
}

.signup-form {
  display: flex;
  flex-direction: column;
  gap: 1.2rem;
}

.form-group {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.form-group label {
  font-weight: 500;
  font-size: 0.9rem;
}

.form-group input {
  padding: 0.8rem;
  border: 1px solid var(--border-color);
  border-radius: 4px;
  background-color: var(--background-color);
  color: var(--text-color);
  transition: border-color 0.3s, box-shadow 0.3s;
}

.form-group input:focus {
  outline: none;
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(66, 133, 244, 0.2);
}

.signup-button {
  margin-top: 1rem;
  padding: 0.8rem;
  background-color: var(--primary-color);
  color: white;
  border: none;
  border-radius: 4px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.3s;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 0.5rem;
}

.signup-button:hover:not(:disabled) {
  background-color: #3b78e7;
}

.signup-button:disabled {
  background-color: #cccccc;
  cursor: not-allowed;
}

.error-message {
  color: var(--accent-color);
  margin-top: 1rem;
  font-size: 0.9rem;
  text-align: center;
}

.signup-footer {
  margin-top: 1.5rem;
  text-align: center;
  font-size: 0.9rem;
}

.signup-footer a {
  color: var(--primary-color);
  text-decoration: none;
  font-weight: 500;
}

.signup-footer a:hover {
  text-decoration: underline;
}

.spinner {
  width: 20px;
  height: 20px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 0.8s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}
</style>

// File: frontend/src/views/ThemeToggle.vue
<template>
    <button @click="toggleTheme" class="theme-toggle" aria-label="Toggle dark mode">
      <svg v-if="isDarkMode" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="12" cy="12" r="5"></circle>
        <path d="M12 1v2M12 21v2M4.22 4.22l1.42 1.42M18.36 18.36l1.42 1.42M1 12h2M21 12h2M4.22 19.78l1.42-1.42M18.36 5.64l1.42-1.42"></path>
      </svg>
      <svg v-else xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
      </svg>
    </button>
  </template>
  
  <script>
  export default {
    data() {
      return {
        isDarkMode: false
      }
    },
    mounted() {
      // Check for saved theme preference or system preference
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      this.isDarkMode = savedTheme === 'dark' || (!savedTheme && prefersDark);
      this.applyTheme();
    },
    methods: {
      toggleTheme() {
        this.isDarkMode = !this.isDarkMode;
        this.applyTheme();
      },
      applyTheme() {
        if (this.isDarkMode) {
          document.documentElement.setAttribute('data-theme', 'dark');
          localStorage.setItem('theme', 'dark');
        } else {
          document.documentElement.removeAttribute('data-theme');
          localStorage.setItem('theme', 'light');
        }
      }
    }
  }
  </script>
  
  <style scoped>
  .theme-toggle {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-color);
    padding: 8px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.3s;
  }
  
  .theme-toggle:hover {
    background-color: var(--hover-color);
  }
  </style>
  
// File: frontend/src/views/ToastNotification.vue
<template>
    <transition name="toast">
      <div v-if="visible" class="toast" :class="type">
        <div class="toast-icon">
          <svg v-if="type === 'success'" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
            <polyline points="22 4 12 14.01 9 11.01"></polyline>
          </svg>
          <svg v-else-if="type === 'error'" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="8" x2="12" y2="12"></line>
            <line x1="12" y1="16" x2="12.01" y2="16"></line>
          </svg>
          <svg v-else xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="12" cy="12" r="10"></circle>
            <line x1="12" y1="16" x2="12" y2="12"></line>
            <line x1="12" y1="8" x2="12.01" y2="8"></line>
          </svg>
        </div>
        <div class="toast-content">
          <p>{{ message }}</p>
        </div>
        <button class="toast-close" @click="close">
          <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
    </transition>
  </template>
  
  <script>
  export default {
    name: 'ToastNotification',
    props: {
      message: {
        type: String,
        required: true
      },
      type: {
        type: String,
        default: 'info',
        validator: (value) => ['success', 'error', 'info', 'warning'].includes(value)
      },
      duration: {
        type: Number,
        default: 3000
      }
    },
    data() {
      return {
        visible: true,
        timeout: null
      }
    },
    mounted() {
      this.timeout = setTimeout(() => {
        this.visible = false;
      }, this.duration);
    },
    beforeUnmount() {
      clearTimeout(this.timeout);
    },
    methods: {
      close() {
        this.visible = false;
      }
    }
  }
  </script>
  
  <style scoped>
  .toast {
    position: fixed;
    bottom: 20px;
    right: 20px;
    display: flex;
    align-items: center;
    padding: 1rem;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    max-width: 350px;
    z-index: 9999;
    animation: slideIn 0.3s ease-out;
  }
  
  .toast.success {
    background-color: #d4edda;
    color: #155724;
  }
  
  .toast.error {
    background-color: #f8d7da;
    color: #721c24;
  }
  
  .toast.info {
    background-color: #d1ecf1;
    color: #0c5460;
  }
  
  .toast.warning {
    background-color: #fff3cd;
    color: #856404;
  }
  
  .toast-icon {
    margin-right: 0.8rem;
    display: flex;
    align-items: center;
  }
  
  .toast-content {
    flex: 1;
  }
  
  .toast-content p {
    margin: 0;
  }
  
  .toast-close {
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.3rem;
    margin-left: 0.8rem;
    opacity: 0.6;
    transition: opacity 0.3s;
  }
  
  .toast-close:hover {
    opacity: 1;
  }
  
  .toast-enter-active, .toast-leave-active {
    transition: all 0.3s ease;
  }
  
  .toast-enter-from, .toast-leave-to {
    opacity: 0;
    transform: translateX(30px);
  }
  
  @keyframes slideIn {
    from { opacity: 0; transform: translateX(30px); }
    to { opacity: 1; transform: translateX(0); }
  }
  </style>
  
// File: frontend/vue.config.js
const { defineConfig } = require('@vue/cli-service')
module.exports = defineConfig({
  transpileDependencies: true
})

// In vue.config.js
// module.exports = {
//   devServer: {
//     proxy: {
//       '/api': {
//         target: 'http://localhost:5000',
//         changeOrigin: true
//       },
//       '/login': {
//         target: 'http://localhost:5000',
//         changeOrigin: true
//       },
//       '/oidc': {
//         target: 'http://localhost:5000',
//         changeOrigin: true
//       },
//       '/logout': {
//         target: 'http://localhost:5000',
//         changeOrigin: true
//       }
//     }
//   }
// }

